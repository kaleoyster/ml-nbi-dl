param_random_state: 42
param_smote_random_state: 11
param_max_iter: 1000
param_splits: 5
param_cv_shuffle: True
test_size: 0.1
max_depth: 30
param_grid_logistic: {'classifier__C':[0.001, 0.01, 0.1, 1, 10, 100, 1000]}

param_grid_decision_tree: {
    'classifier__criterion': ['gini', 'entropy'],
    'classifier__max_depth': [30],
    #'classifier__min_samples_split': [2, 5, 10],
    #'classifier__min_samples_leaf': [1, 2, 4]
}

param_grid_gradient_boosting: {
    #'classifier__n_estimators': [50, 100, 200],
    'classifier__learning_rate': [0.01, 0.1, 0.2],
    'classifier__max_depth': [30],
    'classifier__min_samples_split': [2, 5, 10],
    'classifier__min_samples_leaf': [1, 2, 4]
}

param_grid_random_forest: {
    'classifier__n_estimators': [50, 100, 200],
    'classifier__max_features': ['auto', 'sqrt', 'log2'],
    'classifier__max_depth': [30],
    'classifier__min_samples_split': [2, 5, 10],
    'classifier__min_samples_leaf': [1, 2, 4],
    'classifier__bootstrap': [True, False]
}

param_grid_lg_boost: {
    #'classifier__n_estimators': [50, 100, 200],
    'classifier__learning_rate': [0.01, 0.1, 0.2],
    'classifier__max_depth': [30],
    'classifier__min_child_samples': [1, 5, 10],
    'classifier__subsample': [0.8, 0.9, 1.0],
}

param_grid_xgb_boost: {
    #'classifier__n_estimators': [50, 100, 200],
    'classifier__learning_rate': [0.1, 0.1, 0.2],
    'classifier__max_depth': [30],
    'classifier__min_child_weight': [1, 5, 10],
    'classifier__subsample': [0.8, 0.9, 1.0],
    'classifier__colsample_bytree': [0.8, 0.9, 1.0],
}
# Define the parameter grid for SVM with linear kernel
param_grid_svm_linear: {
    'classifier__C': [0.001, 0.01, 0.1, 1, 10, 100],
    'classifier__gamma': ['auto']
}
